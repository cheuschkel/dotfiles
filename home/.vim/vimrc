scriptencoding utf-8

" Override brain-dead Windows visual mode
behave xterm

" Set up vundle
set nocompatible
filetype off
set rtp+=~/.vim/vundle.vim/
call vundle#rc()

" Vundle bundles

" Sensible Defaults
Bundle 'tpope/vim-sensible'

" Motions/Text Objects
Bundle 'bkad/CamelCaseMotion'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'wellle/targets.vim'
Bundle 'tpope/vim-surround'
Bundle 'justinmk/vim-sneak'
Bundle 'terryma/vim-expand-region'
Bundle 'vim-scripts/matchit.zip'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-rsi'

" UI enhancements
Bundle 'corntrace/bufexplorer'
Bundle 'bling/vim-airline'
Bundle 'bling/vim-bufferline'
Bundle 'scrooloose/nerdtree'
Bundle 'majutsushi/tagbar'
Bundle 'kien/ctrlp.vim'
Bundle 'kana/vim-fakeclip'

" Syntax/Indenting
Bundle 'dagwieers/asciidoc-vim'
Bundle 'tfnico/vim-gradle'
Bundle 'tpope/vim-markdown'
Bundle 'vim-scripts/ebnf.vim'
Bundle 'wting/rust.vim'
Bundle 'vim-scripts/groovyindent'
Bundle 'vim-scripts/indentpython.vim'
Bundle 'othree/html5.vim'
Bundle 'kergoth/vim-bitbake'
Bundle 'cespare/vim-toml'
Bundle 'kchmck/vim-coffee-script'

" External tools
Bundle 'tpope/vim-dispatch'
Bundle 'tpope/vim-fugitive'

" Coding
Bundle 'dantler/vim-alternate'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-commentary'
Bundle 'SirVer/ultisnips'
Bundle 'honza/vim-snippets'

" Other
Bundle 'vim-scripts/vimwiki'
Bundle 'vim-scripts/visSum.vim'
Bundle 'vim-scripts/bufkill.vim'
Bundle 'tpope/vim-repeat'
Bundle 'godlygeek/tabular'

" Themes
Bundle 'ajh17/Spacegray.vim'
colorscheme spacegray

" Litecorrect
augroup litecorrect
  autocmd!
  autocmd FileType markdown call litecorrect#init()
  autocmd FileType textile call litecorrect#init()
augroup END
let g:litecorrect#typographic = 0
Bundle 'reedes/vim-litecorrect'

filetype plugin indent on

" =====[General settings]=====
set nobackup                   " Don't leave cruft all over the place
set nowritebackup              " Don't leave cruft all over the place
set encoding=utf-8             " Use UTF-8 by default
set ff=unix                    " If not unix formatted, I want to know
set splitbelow                 " Open new splits at bottom
set splitright                 " Open new vsplits at the right
set modeline
set ignorecase                 " Ignore case in searches...
set smartcase                  " ...unless I specify a capital letter
set hlsearch
set showmatch

" =====[Autocommands]=====
if has("autocmd")
  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  autocmd FileType python let b:vimpipe_command="python -"

  augroup END

endif " has("autocmd")

" =====[Suffix settings]=====
" When doing tab completion, give the following files lower priority.
set suffixes+=.info,.aux,.log,.dvi,.bbl,.out,.o,.lo

" =====[Line number settings]=====
if v:version >= 700
  set numberwidth=3
endif
if v:version >= 703
  set relativenumber
endif

" =====[Command mappings]=====
inoremap kj <Esc>
inoremap <Esc> <nop>
nnoremap <silent><C-j> :set paste<CR>m`o<Esc>``:set nopaste<CR>
nnoremap <silent><C-k> :set paste<CR>m`O<Esc>``:set nopaste<CR>
nnoremap <Space> i_<Esc>r
nnoremap <leader>c :!ctags -R . --exclude=.git --exclude=build --exclude=crossbuild && cscope -b -R<CR>
nnoremap <leader>q :nohlsearch<CR>
nnoremap <leader>ev :split $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
nnoremap =j :%!python -m json.tool<CR>

nnoremap <leader>wo :VimwikiIndex<CR> :VimwikiGoto work/index<CR>
nnoremap <leader>d :VimwikiIndex<CR> :VimwikiGoto Brain Dump<CR>
nnoremap <leader>wod :VimwikiIndex<CR> :VimwikiGoto work/Brain Dump<CR>

" Replace normal buffer unload/delete/wipe mappings with bufkill.vim
cabbrev bun BUN
cabbrev bd BD
cabbrev bw BW

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Add a 'yank entire buffer to system clipboard' command
nnoremap <leader>a :1,$y+<CR>

" Wipe the current buffer
nnoremap <leader>x :BW<CR>

" =====[Vimwiki options]=====
if isdirectory($HOME . "/Dropbox")
  let g:personal_dropbox_loc = $HOME . "/Dropbox"
else
  let g:personal_dropbox_loc = $DROPBOX
endif
let wiki_1 = {}
let wiki_1.path = g:personal_dropbox_loc . '/vimwiki/'
let wiki_1.path_html = g:personal_dropbox_loc . '/vimwiki_html/'
let wiki_1.template_path = g:personal_dropbox_loc . '/etc/vimwiki_templates/'
let wiki_1.template_default = 'default'
let wiki_1.template_ext = '.html'
let wiki_1.nested_syntaxes = {
      \ 'c++': 'cpp',
      \ 'ebnf': 'ebnf',
      \ 'groovy': 'groovy',
      \ 'java': 'java',
      \ 'markdown': 'markdown',
      \ 'python': 'python',
      \ 'rust': 'rust',
      \ 'sh': 'sh',
      \ 'verilog': 'verilog',
      \ }
let g:vimwiki_list = [wiki_1]

" =====[Markdown Options]=====
let g:markdown_fenced_languages = [ 'c', 'cpp', 'sh' ]

" =====[Airline options]=====
let g:airline_theme='powerlineish'
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_section_z=''
let g:airline#extensions#bufferline#enabled = 1
let g:airline#extensions#hunks#enabled = 1
let g:airline#extensions#tagbar#enabled = 1

" =====[Expand region mappings]=====
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" =====[Use persistent undo ]=====
if has('persistent_undo')
  set undodir=$HOME/.vim_undo
  set undolevels=5000
  set undofile
endif

" =====[Highlight offensive characters]=====
" (uBB is right double angle, uB7 is middle dot)
exec "set lcs=tab:\uBB\uBB,trail:\uB7,nbsp:~"

augroup HighlightOffensive
    autocmd!
    autocmd BufEnter  *       set list
    autocmd BufEnter  *.txt   set nolist
    autocmd BufEnter  *       if !&modifiable
    autocmd BufEnter  *           set nolist
    autocmd BufEnter  *       endif
augroup END

" =====[Highlight spelling on request]=====
set spelllang=en_us
nnoremap <leader>sp :setlocal invspell<CR>

" =====[NERDTree Options]=====
let NERDTreeChristmasTree=1
let NERDTreeCascadeOpenSingleChildDir=1
let NERDTreeAutoDeleteBuffer=1
nnoremap <leader>n :NERDTree<CR>

" =====[TagBar Options]=====
nnoremap <leader>t :TagbarToggle<CR>

" =====[UltiSnips Options]=====
let g:UltiSnipsExpandTrigger="<tab>"

" =====[CScope Bindings]=====
set cscopetag
set cscopetagorder=1
if filereadable("cscope.out")
  cscope add cscope.out
elseif $CSCOPE_DB != ""
  cscope add $CSCOPE_DB
endif
nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>s :scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :scs find d <C-R>=expand("<cword>")<CR><CR>


" vim: set fenc=utf-8 tw=80 sw=2 sts=2 et foldmethod=marker :
