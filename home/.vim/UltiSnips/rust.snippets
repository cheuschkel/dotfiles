snippet copy
// Copyright (c) 2017 SmartThings. All Rights Reserved.
endsnippet

snippet mit "MIT copyright template"
// The MIT License (MIT)
//
// Copyright (c) ${1:YEAR} ${2:Nick Stevens <nick@bitcurry.com>}
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
endsnippet

snippet asref
impl AsRef<$1> for $2 {
    fn as_ref(&self) -> &$1 {
        $3
    }
}
endsnippet

snippet default
impl Default for $1 {
    fn default() -> Self {
        $1 {
            $2
        }
    }
}
endsnippet

snippet debug
impl fmt::Debug for $1 {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "$2", $3)
    }
}
endsnippet

snippet display
impl fmt::Display for $1 {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "$2", $3)
    }
}
endsnippet

snippet deref
impl Deref for $1 {
    type Target = $2;
    fn deref(&self) -> &Self::Target {
        $3
    }
}
endsnippet

snippet from
impl From<${1:FROM}> for ${2:TO} {
    fn from(val: $1) -> $2 {
        $3
    }
}
endsnippet

snippet frome
impl From<${1:io::Error}> for ${2:TO} {
    fn from(e: $1) -> $2 {
        ${3:$2::$1(e)}
    }
}
endsnippet

snippet future
impl Future for $1 {
    type Item = $2;
    type Error = $3;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        $4
    }
}
endsnippet

snippet stream
impl Stream for $1 {
    type Item = $2;
    type Error = $3;

    fn poll(&mut self) -> Poll<Option<Self::Item>, Self::Error> {
        $4
    }
}
endsnippet

snippet sink
impl Sink for $1 {
    type SinkItem = $2;
    type SinkError = $3;
    fn start_send(&mut self,
                  item: Self::SinkItem)
                  -> StartSend<Self::SinkItem, Self::SinkError> {
        $4
    }

    fn poll_complete(&mut self) -> Poll<(), Self::SinkError> {
        $5
    }
}
endsnippet

snippet write
write!(f, "$1"${2:, ${3:arg}})$0
endsnippet

snippet pe "public enum definition"
#[derive(Debug)]
pub enum ${1:Name} {
    ${2},
}
endsnippet

snippet en "enum definition"
#[derive(Debug)]
enum ${1:Name} {
    ${2},
}
endsnippet
