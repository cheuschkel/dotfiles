extends copyright-rust

snippet allder
#[derive(Clone, Copy, Debug, Default, Hash, Eq, Ord, PartialEq, PartialOrd)]
endsnippet

snippet asref
impl AsRef<$1> for $2 {
    fn as_ref(&self) -> &$1 {
        $3
    }
}
endsnippet

snippet default
impl Default for $1 {
    fn default() -> Self {
        $1 {
            $2
        }
    }
}
endsnippet

snippet debug
impl fmt::Debug for $1 {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "$2", $3)
    }
}
endsnippet

snippet display
impl fmt::Display for $1 {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "$2", $3)
    }
}
endsnippet

snippet deref
impl Deref for $1 {
    type Target = $2;
    fn deref(&self) -> &Self::Target {
        $3
    }
}
endsnippet

snippet from
impl From<${1:FROM}> for ${2:TO} {
    fn from(val: $1) -> $2 {
        $3
    }
}
endsnippet

snippet frome
impl From<${1:io::Error}> for ${2:TO} {
    fn from(e: $1) -> $2 {
        ${3:$2::$1(e)}
    }
}
endsnippet

snippet future
impl Future for $1 {
    type Item = $2;
    type Error = $3;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        $4
    }
}
endsnippet

snippet stream
impl Stream for $1 {
    type Item = $2;
    type Error = $3;

    fn poll(&mut self) -> Poll<Option<Self::Item>, Self::Error> {
        $4
    }
}
endsnippet

snippet sink
impl Sink for $1 {
    type SinkItem = $2;
    type SinkError = $3;
    fn start_send(&mut self,
                  item: Self::SinkItem)
                  -> StartSend<Self::SinkItem, Self::SinkError> {
        $4
    }

    fn poll_complete(&mut self) -> Poll<(), Self::SinkError> {
        $5
    }
}
endsnippet

snippet write
write!(f, "$1"${2:, ${3:arg}})$0
endsnippet

snippet pe "public enum definition"
#[derive(Debug)]
pub enum ${1:Name} {
    ${2},
}
endsnippet

snippet en "enum definition"
#[derive(Debug)]
enum ${1:Name} {
    ${2},
}
endsnippet

snippet actor
use actix::{Actor, Context, Running};

pub struct $1;

impl $1 {
    pub fn new($2) -> $1 {
        $1
    }
}

impl Actor for $1 {
    type Context = Context<Self>;

    fn started(&mut self, _ctx: &mut Self::Context) {
    }

    fn stopping(&mut self, _ctx: &mut Self::Context) -> Running {
        Running::Stop
    }

    fn stopped(&mut self, _ctx: &mut Self::Context) {
    }
}
endsnippet

snippet handler
impl Handler<$1> for $2 {
    type Result = $3;

    fn handle(&mut self, _req: $1, _ctx: &mut Self::Context) -> $3 {
    }
}
endsnippet

snippet sm
#[derive(Debug, StateMachineFuture)]
#[state_machine_future(context = "$1Context")]
pub enum $1 {
    #[state_machine_future(start, transitions())]
    Start,

    #[state_machine_future(ready)]
    Finished($2),

    #[state_machine_future(error)]
    ErrorState(Error),
}
endsnippet

snippet state
#[state_machine_future(transitions($3))]
$1 {
    $2
},
endsnippet

snippet smpoll
fn poll_$1<'a, 'c>(
    $1: &'a mut RentToOwn<'a, $2>,
    context: &'c mut RentToOwn<'c, $3>,
) -> Poll<After$2, Error> {
    let $2 { $4 } = $1.take();
    $5
}
endsnippet

snippet trans
transition!($1)
endsnippet
